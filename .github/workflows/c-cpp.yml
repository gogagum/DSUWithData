name: C/C++ CI

# Controls when the action will run. Triggers the workflow on push
on:
  push:
  pull_request:
  release:
  # tags:
  # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Ubuntu_Latest_GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Debug",
            cxx: "g++-11",
            archiver: "7z a",
            generators: "Ninja"
          }
          - {
            name: "Ubuntu_Latest_Clang",
            os: ubuntu-latest,
            artifact: "ubuntu_clang.7z",
            build_type: "Debug",
            cxx: "clang++-14",
            archiver: "7z a",
            generators: "Ninja"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install dependencies on ubuntu gcc
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake g++-11 libboost-all-dev
          ninja --version
          cmake --version
          gcc --version
      - name: Install dependencies on ubuntu clang
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_Clang')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake libboost-all-dev
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 14
          ninja --version
          cmake --version
          clang --version
      - name: Configure
        shell: bash
        run: |
          mkdir build
          cd build
          CXX="${{ matrix.config.cxx }}" cmake \
            -DBUILD_TESTING=ON \
            -S ../ \
            -B . \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}

      - name: Build
        shell: bash
        run: |
          cd build
          cmake --build . --config ${{ matrix.config.build_type }}
      - name: Test
        shell: bash
        run: | 
          cd build/test
          ctest
